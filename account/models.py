#from __future__ import unicode_literalsfrom django.db import modelsfrom django.conf import settings#画面認証用from django.utils.encoding import python_2_unicode_compatiblefrom django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixinimport datetime##from datetime import datetime#変更した場合、テンプレートの検索欄も要変更ACCOUNT_TYPE_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '普通'),    (2, '当座'),)TRADE_DIVISION_CHOICES = (    (0, '外注・工事仕入'),    (1, '経費'),)PAY_DAY_DIVISION_CHOICES = (    (0, '当月'),    (1, '翌月'),    (2, '翌々月'),    (3, '月末(休日前倒し)'),    (4, '月末(休日未考慮)'),    (5, '翌月末(休日前倒し)'),    (6, '翌月末(休日先送り)'),)PAYMENT_METHOD_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '振込'),    (2, '口座振替'),    (3, 'ＡＴＭ'),    (4, '現金'),)FIXED_CONTENT_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '項目のみ'),    (2, '項目のみ（指定月）'),    (3, '項目・固定費'),    (4, '項目・固定費（指定月）'),    (5, '項目・概算＝仕入金額'),)BORROW_LEND_CHOICES = (    (0, '貸'),    (1, '借'),)BANK_CHOICES = (    ('', settings.EMPTY_MARK),    (0, '北越'),    (1, 'さんしん(塚野目)'),    (2, 'さんしん(本店)'),)#消費税フラグ(軽減税率を考慮)REDUCED_TAX_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '８％'),     #増税の際は、ここを変える)# Create your models here.class Bank(models.Model):    """銀行マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    name = models.CharField('銀行名', max_length=255)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        def __str__(self):        return self.nameclass Bank_Branch(models.Model):    """銀行支店マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    #bank_id = models.IntegerField('銀行ID', blank=True, default=0)    bank = models.ForeignKey(Bank, verbose_name="銀行名", null=True, blank=True, on_delete=models.SET_NULL )    name = models.CharField('銀行支店名', max_length=255)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        def __str__(self):        return self.name        class Account_Title(models.Model):    """勘定科目マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    name = models.CharField('勘定科目名', max_length=255)    trade_division_id = models.IntegerField('取引区分(0:経費 1:外注等)', blank=True, choices=TRADE_DIVISION_CHOICES, default=0)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        #テンプレートにリストの選択値を表示させるためのもの    def trade_division_verbose(self):        return dict(TRADE_DIVISION_CHOICES)[self.trade_division_id]    def __str__(self):        return self.nameclass Partner(models.Model):    """取引先マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    administrative_name = models.CharField('取引先名(管理用)', max_length=255, blank=True)    name = models.CharField('取引先名', max_length=255)    trade_division_id = models.IntegerField('取引区分ID', blank=True, choices=TRADE_DIVISION_CHOICES, default=0)    #account_title_id = models.IntegerField('支払科目ID', blank=True, default=0)    account_title = models.ForeignKey(Account_Title, verbose_name="支払科目", null=True, blank=True, on_delete=models.SET_NULL)        payment_method_id = models.IntegerField('支払方法ID', blank=True, null=True, choices=PAYMENT_METHOD_CHOICES)        #振込(振替)元--デフォはホクギンとする。    source_bank = models.ForeignKey(Bank, related_name='source_bank', verbose_name="振込/振替元銀行", null=True, blank=True, default=1, on_delete=models.SET_NULL)    #add200120    #振込(振替)元銀行支店    source_bank_branch = models.ForeignKey(Bank_Branch, related_name='source_bank_branch', verbose_name="振込/振替元銀行支店", null=True, blank=True, on_delete=models.SET_NULL )            bank = models.ForeignKey(Bank, verbose_name="振込先銀行", null=True, blank=True, on_delete=models.SET_NULL)    bank_name = models.CharField('振込先銀行名', max_length=255)   #あとで抹消-->消すとmigrateでエラー出る(200120)    bank_branch = models.ForeignKey(Bank_Branch, verbose_name="振込先支店名", null=True, blank=True, on_delete=models.SET_NULL)    branch_name = models.CharField('振込先支店名', max_length=255)  #あとで抹消-->消すとmigrateでエラー出る(200120)    account_type = models.IntegerField('口座種別', blank=True, null=True, choices=ACCOUNT_TYPE_CHOICES)    account_number = models.CharField('口座番号', default="", blank=True, max_length=16)   #upd180312        pay_day =  models.IntegerField('支払日', blank=True, default=0)    pay_day_division = models.IntegerField('支払フラグ(月末等)', default=0, choices=PAY_DAY_DIVISION_CHOICES )    #支払月フラグ    pay_month_flag_1 = models.BooleanField('１月', default=False)    pay_month_flag_2 = models.BooleanField('２月', default=False)    pay_month_flag_3 = models.BooleanField('３月', default=False)    pay_month_flag_4 = models.BooleanField('４月', default=False)    pay_month_flag_5 = models.BooleanField('５月', default=False)    pay_month_flag_6 = models.BooleanField('６月', default=False)    pay_month_flag_7 = models.BooleanField('７月', default=False)    pay_month_flag_8 = models.BooleanField('８月', default=False)    pay_month_flag_9 = models.BooleanField('９月', default=False)    pay_month_flag_10 = models.BooleanField('１０月', default=False)    pay_month_flag_11 = models.BooleanField('１１月', default=False)    pay_month_flag_12 = models.BooleanField('１２月', default=False)    #    fixed_content_id = models.IntegerField('固定項目フラグ', blank=True, null=True, choices=FIXED_CONTENT_CHOICES )    rough_estimate = models.IntegerField('概算', blank=True, null=True)    fixed_cost = models.IntegerField('固定費', blank=True, null=True)    #        created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        #テンプレートにリストの選択値を表示させるためのもの    def trade_division_verbose(self):        return dict(TRADE_DIVISION_CHOICES)[self.trade_division_id]        #ex.モデル単位で取得する場合        #return dict(Scoop.FLAVOR_CHOCIES)[self.flavor]    def payment_method_verbose(self):    #支払方法        if self.payment_method_id != None:            return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]        else:            return dict(PAYMENT_METHOD_CHOICES)['']    def account_type_verbose(self):    #口座種別        if self.account_type != None:          return dict(ACCOUNT_TYPE_CHOICES)[self.account_type]        else:          return dict(ACCOUNT_TYPE_CHOICES)['']    def __str__(self):        return self.nameclass Payment(models.Model):    """支払ファイル"""    order = models.IntegerField('ソート順', blank=True, default=0)    #billing_year_month = models.CharField('支払年月', max_length=6)    billing_year_month = models.DateField('請求〆年月')    trade_division_id = models.IntegerField('取引区分ID', null=True, blank=True, choices=TRADE_DIVISION_CHOICES)    #partner_id = models.IntegerField('取引先ID', blank=True, default=0)    partner = models.ForeignKey(Partner, verbose_name="取引先", null=True, blank=True, on_delete=models.SET_NULL)    #accounttitle_id = models.IntegerField('科目ID', blank=True, default=0)    account_title = models.ForeignKey(Account_Title, verbose_name="項目", null=True, blank=True, on_delete=models.SET_NULL)    billing_amount = models.IntegerField('請求金額', blank=True, null=True)    rough_estimate = models.IntegerField('概算', blank=True, null=True)        payment_amount = models.IntegerField('支払金額', blank=True, null=True)    commission = models.IntegerField('手数料', blank=True, null=True)        payment_method_id = models.IntegerField('支払方法', blank=True, null=True, choices=PAYMENT_METHOD_CHOICES, default=0)        #振込(振替)元    source_bank = models.ForeignKey(Bank, related_name='payment_source_bank', verbose_name="振込/振替元銀行", null=True, blank=True, on_delete=models.SET_NULL )    #振込(振替)元銀行支店    source_bank_branch = models.ForeignKey(Bank_Branch, related_name='payment_source_bank_branch', verbose_name="銀行支店", null=True, blank=True, on_delete=models.SET_NULL )        payment_due_date = models.DateField('支払予定日',blank=True, null=True)    payment_date = models.DateField('支払日',blank=True, null=True)        #add200507    unpaid_amount = models.IntegerField('未払金額', blank=True, null=True)    unpaid_date = models.DateField('未払支払日',blank=True, null=True)    #        #fixed_cost = models.BooleanField('固定費', default=False)    note = models.CharField('備考', max_length=255,blank=True)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)     #テンプレートにリストの選択値を表示させるためのもの    def payment_method_verbose(self):        return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]class Payment_Reserve(models.Model):    #add191218    """支払予約入力ファイル"""    order = models.IntegerField('ソート順', blank=True, default=0)    billing_year_month = models.DateField('請求〆年月')    trade_division_id = models.IntegerField('取引区分ID', null=True, blank=True, choices=TRADE_DIVISION_CHOICES)    partner = models.ForeignKey(Partner, verbose_name="取引先", null=True, blank=True, on_delete=models.SET_NULL)    account_title = models.ForeignKey(Account_Title, verbose_name="項目", null=True, blank=True, on_delete=models.SET_NULL)    billing_amount = models.IntegerField('請求金額', blank=True, null=True)    rough_estimate = models.IntegerField('概算', blank=True, null=True)        #誤入力防止のため抹消    #payment_amount = models.IntegerField('支払金額', blank=True, null=True)    #commission = models.IntegerField('手数料', blank=True, null=True)        payment_method_id = models.IntegerField('支払方法', blank=True, null=True, choices=PAYMENT_METHOD_CHOICES, default=0)        #振込(振替)元    source_bank = models.ForeignKey(Bank, related_name='payment_reserve_source_bank', verbose_name="振込/振替元銀行", null=True, blank=True, on_delete=models.SET_NULL )        #add200120    #振込(振替)元銀行支店    source_bank_branch = models.ForeignKey(Bank_Branch, related_name='payment_reserve_source_bank_branch', verbose_name="銀行支店", null=True, blank=True, on_delete=models.SET_NULL )            payment_due_date = models.DateField('支払予定日',blank=True, null=True)        #支払日は誤入力を防ぐためにカット    #payment_date = models.DateField('支払日',blank=True, null=True)    #note = models.CharField('備考', max_length=255,blank=True)        created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)     #テンプレートにリストの選択値を表示させるためのもの    def payment_method_verbose(self):        return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]#社員マスター（既存データ・Rails側で主に利用）class Staff(models.Model):    staff_name = models.CharField(max_length=255)    class Meta:        managed = False        db_table = 'staffs'    def __str__(self):        return self.staff_name        #工事データ（既存データ・Rails側で主に利用）class ConstructionData(models.Model):    construction_name = models.CharField(max_length=255)    class Meta:        managed = False        db_table = 'construction_data'        def __str__(self):        return self.construction_name        #注文データ（既存データ・Rails側で主に利用）class PurchaseOrderData(models.Model):    purchase_order_code = models.CharField(max_length=255)    class Meta:        managed = False        db_table = 'purchase_order_data'        def __str__(self):        return self.purchase_order_code#請求書見出ファイル（既存データ・Rails側で主に利用）class InvoiceHeader(models.Model):    invoice_code = models.CharField(max_length=255)    construction_name = models.CharField(max_length=255)    customer_name = models.CharField(max_length=255)        class Meta:        managed = False        db_table = 'invoice_headers'    def __str__(self):        #return self.invoice_code        #return self.construction_name        return self.customer_name    #現金出納帳マスターclass Cash_Book(models.Model):    """現金出納帳マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    settlement_date = models.DateField('精算日',blank=True, null=True)    receipt_date = models.DateField('領収書日付',blank=True, null=True)    account_title = models.ForeignKey(Account_Title, related_name='cash_book_account_title', verbose_name="支払科目", null=True, blank=True, on_delete=models.SET_NULL)    description_partner = models.CharField('摘要(取引先)', max_length=255, blank=True)    description_content = models.CharField('摘要(取引内容)', max_length=255, blank=True)    incomes = models.IntegerField('収入金額', blank=True, null=True)    expences = models.IntegerField('支払金額', blank=True, null=True)    balance = models.IntegerField('差引残高', blank=True, null=True)    #消費税フラグ   add190824    reduced_tax_flag = models.IntegerField('軽減税率', blank=True, null=True, choices=REDUCED_TAX_CHOICES )    #担当者(社員マスターとリンクさせる)    staff = models.ForeignKey(Staff,  verbose_name="担当者", blank=True, null=True, on_delete=models.SET_NULL, db_constraint=False )    #仕入注文コード（仕入注文マスターとリンクさせる）    purchase_order_code = models.ForeignKey(PurchaseOrderData,  verbose_name="注文Ｎｏ", null=True, on_delete=models.SET_NULL,                                            blank=True, db_constraint=False )    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        #add200201    #取引内容を返す    def __str__(self):        return self.description_content    #現金出納帳-週次集計ファイル~作成中-180507class Cash_Book_Weekly(models.Model):    """現金出納帳・週次集計ファイル"""    computation_date = models.DateField('集計日')    balance = models.IntegerField('残高', blank=True, null=True)    balance_president = models.IntegerField('残高(社長)', blank=True, null=True)    balance_staff = models.IntegerField('残高(社員)', blank=True, null=True)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)#資金繰表見出ファイル#add200115class Cash_Flow_Header(models.Model):    """資金繰表見出ファイル"""    cash_flow_date = models.DateField('日付')    #    expected_expense = models.IntegerField('支出金額(予定)', blank=True, default=0)    actual_expense = models.IntegerField('支出金額(実際)', blank=True, default=0)    expected_income = models.IntegerField('収入金額(予定)', blank=True, default=0)    actual_income = models.IntegerField('収入金額(実際)', blank=True, default=0)    #    expected_hokuetsu = models.IntegerField('北越金額(予定)', blank=True, default=0)    actual_hokuetsu = models.IntegerField('北越金額(実際)', blank=True, default=0)    #    expected_sanshin_tsukanome = models.IntegerField('三信(塚野目)金額(予定)', blank=True, default=0)    actual_sanshin_tsukanome = models.IntegerField('三信(塚野目)金額(実際)', blank=True, default=0)    #    expected_sanshin_main = models.IntegerField('三信(本店)金額(予定)', blank=True, default=0)    actual_sanshin_main = models.IntegerField('三信(本店)金額(実際)', blank=True, default=0)    #    expected_cash_president = models.IntegerField('現金(社長)金額(予定)', blank=True, default=0)    actual_cash_president = models.IntegerField('現金(社長)金額(実際)', blank=True, default=0)    #    expected_cash_company = models.IntegerField('現金(会社)金額(予定)', blank=True, default=0)    actual_cash_company = models.IntegerField('現金(会社)金額(実際)', blank=True, default=0)    #資金繰表明細(予定)ファイルclass Cash_Flow_Detail_Expected(models.Model):    """資金繰表明細ファイル"""    expected_date = models.DateField('予定日')    #construction_id = models.IntegerField('工事Id', blank=True, null=True)    #工事(railsの工事マスターとリンク)    construction = models.ForeignKey(ConstructionData,  verbose_name="工事Id", null=True, blank=True, on_delete=models.SET_NULL, db_constraint=False )    purchase_id = models.IntegerField('注文Id', null=True, default=None)    partner = models.ForeignKey(Partner, verbose_name="取引先", null=True, blank=True, on_delete=models.SET_NULL)    expected_expense = models.IntegerField('予定支出金額', blank=True, default=0)    expected_income = models.IntegerField('予定収入金額', blank=True, default=0)    payment_bank_id = models.IntegerField('支払銀行Id', blank=True, null=True)    payment_bank_branch_id = models.IntegerField('支払銀行支店Id', default=None, null=True)    payment_method_id = models.IntegerField('支払方法ID', default=None, null=True, choices=PAYMENT_METHOD_CHOICES)    cash_id = models.IntegerField('現金Id', null=True, default=None)    account_title = models.ForeignKey(Account_Title, verbose_name="科目", null=True, blank=True, on_delete=models.SET_NULL)    billing_year_month = models.DateField('請求〆年月', null=True, blank=True)    def payment_method_verbose(self):    #支払方法        if self.payment_method_id != None:            return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]        else:            return dict(PAYMENT_METHOD_CHOICES)['']        def payment_bank_verbose(self):    #銀行名(さんしんが本店・塚野目で別れている)        if self.payment_bank_id == settings.ID_BANK_HOKUETSU:        #北越            return dict(BANK_CHOICES)[0]        elif self.payment_bank_id == settings.ID_BANK_SANSHIN:            if self.payment_bank_branch_id != settings.ID_BANK_BRANCH_SANSHIN_MAIN:            #さんしん塚野目                return dict(BANK_CHOICES)[1]            else:            #さんしん本店                return dict(BANK_CHOICES)[2]        else:            return dict(BANK_CHOICES)['']                #ng    #account_title = models.ForeignKey(Account_Title, verbose_name="科目", null=True, default=None, on_delete=models.SET_NULL)    #billing_year_month = models.DateField('請求〆年月', null=True, default=datetime.date.today)  #資金繰表明細(実績)ファイルclass Cash_Flow_Detail_Actual(models.Model):    """資金繰表明細実績ファイル"""    actual_date = models.DateField('実際日',blank=True, null=True)    partner = models.ForeignKey(Partner, verbose_name="取引先", null=True, blank=True, on_delete=models.SET_NULL)    actual_expense = models.IntegerField('実際支出金額', blank=True, default=0)    actual_income = models.IntegerField('実際収入金額', blank=True, default=0)    payment_bank_id = models.IntegerField('支払銀行Id', blank=True, null=True)    payment_bank_branch_id = models.IntegerField('支払銀行支店Id', blank=True, null=True)    payment_method_id = models.IntegerField('支払方法ID', default=None, null=True, choices=PAYMENT_METHOD_CHOICES)    cash_id = models.IntegerField('現金Id', blank=True, null=True)    #invoice_header_id = models.IntegerField('請求書Id', blank=True, null=True)    invoice_header = models.ForeignKey(InvoiceHeader,  verbose_name="請求書", null=True, blank=True, on_delete=models.SET_NULL, db_constraint=False )    purchase_id = models.IntegerField('注文Id', null=True, default=None)    adjust_flag = models.IntegerField('調整フラグ', blank=True, null=True, default=0)    account_title = models.ForeignKey(Account_Title, verbose_name="科目", null=True, blank=True, on_delete=models.SET_NULL)    cash_book = models.ForeignKey(Cash_Book, verbose_name="出納帳", null=True, blank=True, on_delete=models.SET_NULL )    billing_year_month = models.DateField('請求〆年月', blank=True, null=True)        def payment_method_verbose(self):    #支払方法        if self.payment_method_id != None:            return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]        else:            return dict(PAYMENT_METHOD_CHOICES)['']                #def get_description_name(self):    #    return self.cash_id.description_content        #def cash_book_description_content_verbose(self):    ##摘要    #    if self.cash_book_id != None:    #        return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]    #    else:    #        return dict(PAYMENT_METHOD_CHOICES)['']        def payment_bank_verbose(self):    #銀行名(さんしんが本店・塚野目で別れている)        if self.payment_bank_id == settings.ID_BANK_HOKUETSU:        #北越            return dict(BANK_CHOICES)[0]        elif self.payment_bank_id == settings.ID_BANK_SANSHIN:            if self.payment_bank_branch_id != settings.ID_BANK_BRANCH_SANSHIN_MAIN:            #さんしん塚野目                return dict(BANK_CHOICES)[1]            else:            #さんしん本店                return dict(BANK_CHOICES)[2]        else:            return dict(BANK_CHOICES)['']            #貸借表ファイルclass Balance_Sheet(models.Model):    """貸借表ファイル"""        #objects = Balance_SheetQueryManager()        accrual_date = models.DateField('発生日',blank=True, null=True)    borrow_lend_id=models.IntegerField('貸借Id', choices=BORROW_LEND_CHOICES, default=0)    amount= models.IntegerField('貸借金額', blank=True, default=0)    bank_id = models.IntegerField('銀行Id', choices=BANK_CHOICES, blank=True, null=True, default=None)    #account_id = models.IntegerField('科目Id', blank=True, null=True, default=None)    account_title = models.ForeignKey(Account_Title, verbose_name="科目", null=True, blank=True, on_delete=models.SET_NULL)        description = models.CharField('適用', max_length=255, blank=True, null=True)    cash_book = models.ForeignKey(Cash_Book, verbose_name="出納帳", null=True, blank=True, on_delete=models.SET_NULL )        #テンプレートにリストの選択値を表示させるためのもの    def borrow_lend_verbose(self):        return dict(BORROW_LEND_CHOICES)[self.borrow_lend_id]    def bank_verbose(self):        return dict(BANK_CHOICES)[self.bank_id]#貸借表集計専用class Balance_Sheet_Tally(models.Model):    accrual_date = models.DateField('発生日',blank=True, null=True)    borrow_amount = models.IntegerField('貸金額', blank=True, null=True, default=0)    lend_amount = models.IntegerField('借金額', blank=True, null=True, default=0)##以下は認証用のモデル@python_2_unicode_compatibleclass AuthUserManager(BaseUserManager):    def create_user(self, username, email, password, last_name, first_name):        """        ユーザ作成        :param username: ユーザID        :param email: メールアドレス        :param password: パスワード        :param last_name: 苗字        :param first_name: 名前        :return: AuthUserオブジェクト        """        if not email:            raise ValueError('Users must have an email')        if not username:            raise ValueError('Users must have an username')        user = self.model(username=username,                          email=email,                          password=password,                          last_name=last_name,                          first_name=first_name)        user.is_active = True        user.set_password(password)        user.save(using=self._db)        return user    def create_superuser(self, username, email, password, last_name, first_name):        """        スーパーユーザ作成        :param username: ユーザID        :param email: メールアドレス        :param password: パスワード        :param last_name: 苗字        :param first_name: 名前        :return: AuthUserオブジェクト        """        user = self.create_user(username=username,                                email=email,                                password=password,                                last_name=last_name,                                first_name=first_name)        user.is_staff = True        user.is_superuser = True        user.save(using=self._db)        return user@python_2_unicode_compatibleclass AuthUser(AbstractBaseUser, PermissionsMixin):    """    ユーザ情報を管理する    """    class Meta:        verbose_name = 'ユーザ'        verbose_name_plural = 'ユーザ'    def get_short_name(self):        """        ユーザの苗字を取得する        :return: 苗字        """        return self.last_name    def get_full_name(self):        """        ユーザのフルネームを取得する        :return: 苗字 + 名前        """        return self.last_name + self.first_name    username = models.CharField(verbose_name='ユーザID',                                unique=True,                                max_length=30)    last_name = models.CharField(verbose_name='苗字',                                 max_length=30,                                 default=None)    first_name = models.CharField(verbose_name='名前',                                  max_length=30,                                  default=None)    email = models.EmailField(verbose_name='メールアドレス',                              null=True,                              default=None)    date_joined = models.DateTimeField(auto_now_add=True)    is_active = models.BooleanField(verbose_name='有効フラグ',                                    default=True)    is_staff = models.BooleanField(verbose_name='管理サイトアクセス権限',                                   default=False)    USERNAME_FIELD = 'username'    REQUIRED_FIELDS = ['email', 'last_name', 'first_name']    objects = AuthUserManager()    def __str__(self):        return self.last_name + ' ' + self.first_name###以上