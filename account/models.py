from django.db import modelsfrom django.conf import settings#from datetime import datetimeACCOUNT_TYPE_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '普通'),    (2, '当座'),)TRADE_DIVISION_CHOICES = (    (0, '外注・工事仕入'),    (1, '経費'),)PAY_DAY_DIVISION_CHOICES = (    (0, '当月'),    (1, '翌月'),    (2, '翌々月'),    (3, '月末'),)PAYMENT_METHOD_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '振込'),    (2, '口座振替'),    (3, '現金'),)FIXED_CONTENT_CHOICES = (    ('', settings.EMPTY_MARK),    (1, '項目のみ'),    (2, '項目のみ（指定月）'),    (3, '項目・固定費'),    (4, '項目・固定費（指定月）'),    (5, '項目・概算＝仕入金額'),)# Create your models here.class Bank(models.Model):    """銀行マスター"""    name = models.CharField('銀行名', max_length=255)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        def __str__(self):        return self.nameclass Bank_Branch(models.Model):    """銀行支店マスター"""    #bank_id = models.IntegerField('銀行ID', blank=True, default=0)    bank = models.ForeignKey(Bank, verbose_name="銀行名", null=True, blank=True)    name = models.CharField('銀行支店名', max_length=255)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        def __str__(self):        return self.name        class Account_Title(models.Model):    """勘定科目マスター"""    name = models.CharField('勘定科目名', max_length=255)    trade_division_id = models.IntegerField('取引区分(0:経費 1:外注等)', blank=True, choices=TRADE_DIVISION_CHOICES, default=0)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        #テンプレートにリストの選択値を表示させるためのもの    def trade_division_verbose(self):        return dict(TRADE_DIVISION_CHOICES)[self.trade_division_id]    def __str__(self):        return self.nameclass Partner(models.Model):    """取引先マスター"""    order = models.IntegerField('ソート順', blank=True, default=0)    administrative_name = models.CharField('取引先名(管理用)', max_length=255, blank=True)    name = models.CharField('取引先名', max_length=255)    trade_division_id = models.IntegerField('取引区分ID', blank=True, choices=TRADE_DIVISION_CHOICES, default=0)    #account_title_id = models.IntegerField('支払科目ID', blank=True, default=0)    account_title = models.ForeignKey(Account_Title, verbose_name="支払科目", null=True, blank=True)        payment_method_id = models.IntegerField('支払方法ID', blank=True, choices=PAYMENT_METHOD_CHOICES, default=0)    #bank_id = models.IntegerField('振込先銀行', blank=True, default=0)    bank = models.ForeignKey(Bank, verbose_name="振込先銀行", null=True, blank=True)    bank_name = models.CharField('振込先銀行名', max_length=255)   #あとで抹消    #bank_branch_id = models.IntegerField('振込先銀行', blank=True, default=0)    bank_branch = models.ForeignKey(Bank_Branch, verbose_name="振込先支店名", null=True, blank=True)    branch_name = models.CharField('振込先支店名', max_length=255)  #あとで抹消    account_type = models.IntegerField('口座種別', blank=True, null=True, choices=ACCOUNT_TYPE_CHOICES)    account_number = models.IntegerField('口座番号', blank=True, null=True)        #add180125    pay_day =  models.IntegerField('支払日', blank=True, default=0)    pay_day_division = models.IntegerField('支払フラグ(月末等)', default=0, choices=PAY_DAY_DIVISION_CHOICES )    #支払月フラグ    pay_month_flag_1 = models.BooleanField('１月', default=False)    pay_month_flag_2 = models.BooleanField('２月', default=False)    pay_month_flag_3 = models.BooleanField('３月', default=False)    pay_month_flag_4 = models.BooleanField('４月', default=False)    pay_month_flag_5 = models.BooleanField('５月', default=False)    pay_month_flag_6 = models.BooleanField('６月', default=False)    pay_month_flag_7 = models.BooleanField('７月', default=False)    pay_month_flag_8 = models.BooleanField('８月', default=False)    pay_month_flag_9 = models.BooleanField('９月', default=False)    pay_month_flag_10 = models.BooleanField('１０月', default=False)    pay_month_flag_11 = models.BooleanField('１１月', default=False)    pay_month_flag_12 = models.BooleanField('１２月', default=False)    #    fixed_content_id = models.IntegerField('固定項目フラグ', blank=True, null=True, choices=FIXED_CONTENT_CHOICES )    rough_estimate = models.IntegerField('概算', blank=True, null=True)    fixed_cost = models.IntegerField('固定費', blank=True, null=True)    #        created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)        #テンプレートにリストの選択値を表示させるためのもの    def trade_division_verbose(self):        return dict(TRADE_DIVISION_CHOICES)[self.trade_division_id]        #ex.モデル単位で取得する場合        #return dict(Scoop.FLAVOR_CHOCIES)[self.flavor]    def payment_method_verbose(self):    #支払方法       return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]    def account_type_verbose(self):    #口座種別        if self.account_type != None:          return dict(ACCOUNT_TYPE_CHOICES)[self.account_type]        else:          return dict(ACCOUNT_TYPE_CHOICES)['']    def __str__(self):        return self.nameclass Payment(models.Model):    """支払ファイル"""    order = models.IntegerField('ソート順', blank=True, default=0)    #billing_year_month = models.CharField('支払年月', max_length=6)    billing_year_month = models.DateField('請求〆年月')    trade_division_id = models.IntegerField('取引区分ID', null=True, blank=True, choices=TRADE_DIVISION_CHOICES)    #partner_id = models.IntegerField('取引先ID', blank=True, default=0)    partner = models.ForeignKey(Partner, verbose_name="取引先", null=True, blank=True)    #accounttitle_id = models.IntegerField('科目ID', blank=True, default=0)    account_title = models.ForeignKey(Account_Title, verbose_name="項目", null=True, blank=True)    billing_amount = models.IntegerField('支払金額', blank=True, default=0)    rough_estimate = models.IntegerField('概算', blank=True, null=True)    payment_method_id = models.IntegerField('支払方法', blank=True, choices=PAYMENT_METHOD_CHOICES, default=0)    payment_due_date = models.DateField('支払予定日',blank=True, null=True)    payment_date = models.DateField('支払日',blank=True, null=True)    fixed_cost = models.BooleanField('固定費', default=False)    note = models.CharField('備考', max_length=255,blank=True)    created_at = models.DateTimeField('登録日時',auto_now_add=True, blank=True, null=True)    update_at = models.DateTimeField('更新日時',auto_now=True, blank=True, null=True)     #テンプレートにリストの選択値を表示させるためのもの    def payment_method_verbose(self):        return dict(PAYMENT_METHOD_CHOICES)[self.payment_method_id]                